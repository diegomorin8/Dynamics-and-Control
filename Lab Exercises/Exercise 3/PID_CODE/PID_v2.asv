%% COMMENTARY & (Help Text)
% Diegeo - PID Parametrization Tool
%   Call with (double Mp, double tr, double ts, 
%             double ess, tf G, sym A, sym B, sym B0, int systemorder)
%
%
%%



function [H_FF, H_FB, poleD, P_C, D_C, I_C, N_C] = PID_calc_v2( Mp, tr, ts, ess, G, A, B, B0, order )    
%% - START -
display('------------------------------'); 
display('--- START PARAMETRIZATION ----'); 
display(' ');
%% - Variables
    syms s z D N P I;
    Thres = 0.1;
    P_C     = 0; 
    D_C     = 0;
    I_C     = 0;
    N_C     = 1;
    Ktr     = 1.8;                                                                  %2.2                 tr= 1.8/wn; 
    Kts     = 4.6;                                                                  %3.9                 ts= 4.6/zeta/wn;  
    display('Initialization complete                 [x];'); 
%% - Specifications 
    if Mp ~= -1 && tr == -1 && ts ~= -1
        if Mp == 0
            zeta = 1;
        else 
            %tp  = pi/(wn*sqrt(1-z^2)); log(abs(Mp)) == -z*wn*tp;
            eqn = -pi*z/sqrt(1-z^2) == log(abs(Mp));
            zeta = vpa(solve(eqn,z));
        end
        wn      = Kts/(ts*zeta);
        eqn_p1  = s^2 + 2*zeta*wn*s + wn^2 == 0;
        poleD   = vpa(solve(eqn_p1,s));
        pdVec   = [real(poleD(1)) imag(poleD(1))];
        if( abs(pdVec(2)) <= 0.001)
            pdVec(2) = 0;
        end
        
    elseif Mp ~= -1 && tr ~= -1 && ts == -1
        if Mp > 0
            eqn = -pi*z/sqrt(1-z*z) == log(Mp);
            zeta = vpa(solve(eqn,z));
        else 
            zeta = 1;
        end
        wn      = %Ktr/tr;
        wn      = (1+1.1*zeta+1.4*zeta^2)/tr;                                               
        eqn_p1  = s^2 + 2*zeta*wn*s + wn^2 == 0; 
        poleD   = vpa(solve(eqn_p1,s));
        pdVec   = [real(poleD(1)) imag(poleD(1))];
        if( abs(pdVec(2)) <= 0.001)
            pdVec(2) = 0;
        end
        
    elseif Mp == -1 && tr ~= -1 && ts ~= -1
        wn      = (1+1.1*zeta+1.4*zeta^2)/tr;                                               %Ktr/tr;
        zeta   = 3/(wn*ts);                                                                 %Kts/(ts*wn);
        eqn_p1  = s*s + 2*zeta*wn*s + wn*wn == 0; 
        poleD   = vpa(solve(eqn_p1,s));
        pdVec   = [real(poleD(1)) imag(poleD(1))];
        if( abs(pdVec(2)) <= 0.001)
            pdVec(2) = 0;
        end
        
    else
        H_FF  = -1;
        H_FB  = -1;
        disp('ERROR: Parameter MISFIT!')
        return;
    end
    w0          = 2*abs(pdVec(1));
outstr=strcat('Specifications found                    [x];   (','wN=  ',num2str(double(wn)),' | zeta=  ',num2str(double(zeta)),' | w0=  ',num2str(double(w0)),')  ');disp(outstr);                                                                                        %     freq_param = vpa([wn, zeta],2);display('    wn   |   zeta');display(freq_param);
    [Zeros,Poles,Gain] = zpkdata(G);
    

outstr=strcat('Finding desired Poles complete          [x];   (','Dominant Poles =  ',num2str(double(pdVec(1))),' + ',num2str(double(pdVec(2))),'j  )');disp(outstr);
%% - Angels

    Poles_vec = [real(Poles{1,1}) imag(Poles{1,1})];
    Zeros_vec = [real(Zeros{1,1}) imag(Zeros{1,1})];                            % Lets calculate the position of the zero of the derivative part
    
   
    anglesPoles(1) = 0;                                                         % We need to study the angles regarded to the dominant pole
    for i = 1:size(Poles_vec,1)
        if Poles_vec(i,2) >= 0
            anglesPoles(i) = rad2deg(double(atan((-Poles_vec(i,2) + pdVec(2))/(-Poles_vec(i,1) + pdVec(1)))));
            if anglesPoles(i) < 0
                anglesPoles(i) = 180 + anglesPoles(i);
            end
        end
    end

    anglesZeros(1) = 0;                                                         % We need to study the angles regarded to the dominant pole
    for i = 1:size(Zeros_vec,1)
        if Zeros_vec(i,2) >= 0
            anglesZeros(i) = rad2deg(double(atan((-Zeros_vec(i,2) + pdVec(2))/(-Zeros_vec(i,1) + pdVec(1)))));
            if anglesZeros(i) < 0
                anglesZeros(i) = 180 + anglesZeros(i);
            end
        end
    end
    
    anglePD = 0;
    for i = 1:size(anglesPoles,2)
        anglePD = anglePD - anglesPoles(i);
    end
    
    for i = 1:size(anglesZeros,2)
        anglePD = anglePD + anglesZeros(i);
    end   
%% - Controller Type
    display('Choosing [P | I | D] components:');
%%    --> If Loop
    if anglePD <= Thres && anglePD >= -Thres 

        
% ###################################################################################################################################################                
%%  |       P or PI-CONTROLLER      (No D-Parameter required)   
% P - PARAMETER REQUIRED:  
display('                          P - Parameter [x];');
        S = P;                                                                  
        R = 1;
        Acl =  A*R + B*S;
        if order == 3   
                Ad  = (s^2 + 2*wn*zeta*s + wn*wn)*(s+wn);
                Am0 = wn^3;
                A0 = (s + w0);
        elseif order == 2                                                            % DOMINANT POLE IMG OR REAL
                Ad  = (s^2 + 2*wn*zeta*s + wn*wn);
                Am0 = wn^2;
                A0 = 1;
        elseif order == 1
                Ad  = (s + abs(pdVec(1)));
                Am0 = abs(pdVec(1));
                A0 = 1;
        end
%         display(vpa(Acl,2));display(vpa(coeffs(Acl,s),2));display(vpa(Ad,2));display(vpa(coeffs(Ad,s),2));
        [P_C] = solve(coeffs(Acl,s) == coeffs(Ad,s));
        if isempty(P_C)
            disp('ERROR: No solution with pole placement!');
            H_FF = 1;
            H_FB = 1;
            return;
        end
        H_FB = tf(double(P_C),1);                                              % H_FB TF 
        T = Am0*A0/B0;
        T_coeff = fliplr(double(coeffs(T,s)));
        H_FF = tf(T_coeff,1);                                                 % H_FF TF
        [y,t] = step(H_FF*feedback(G,H_FB));                                % DETERMINE STEADY-STATE ERROR
        error = abs(1 - y(end));                                                % If error surpasses design threshold I-PARAM required
%%
        if error > ess
%%              ------------> PI-CONTROLLER     
% P & I-PARAMETER REQUIRED:  
display( strcat('                          I - Parameter [x];', 'ESS = ', num2str(error)) ); 
            S = s*P + I;
            R = s;
            Acl =  A*R + B*S;
            if order == 2                                                       % DOMINANT POLE IMG OR REAL
                    Ad  = (s^2 + 2*wn*zeta*s + wn*wn)*(s + w0);
                    Am0 = wn^2;
                    A0 = (s + wn);
            elseif order == 1
                    Ad  = (s + abs(pdVec(1)))*(s + w0);
                    Am0 = abs(pdVec(1));
                    A0 = (s + w0);
            end
            [I_C,P_C] = solve(coeffs(Acl,s) == coeffs(Ad,s));
            if isempty(P_C)
                disp('ERROR: No solution with pole placement!');
                H_FF = 1;
                H_FB = 1;
                return;
            end
            H_FB = tf([double(P_C) double(I_C)],[1 0]);                             % H_FB TF
            T = Am0*A0/B0;
            T_coeff = fliplr(double(coeffs(T,s)));
            H_FF = tf(T_coeff,[1 0]);                                               % H_FF TF
%%
        else
%%              ------------> P-CONTROLLER
display(strcat('                          I - Parameter [ ];', 'ESS = ', num2str(error))); 
             R_PID = P_C;
%%
        end                                                                 % disp(['                          ESS = ' num2str(error)]);

        
% ################################################################################################################################################### 
    else
%%  |      PD or PID-CONTROLLER       ( D-Parameter required)
% P & D-PARAMETER REQUIRED: 
display('                          P - Parameter [x];');
display('                          D - Parameter [x];');
        [Zeros,Poles,Gain] = zpkdata(G);
        Poles_vec = [real(Poles{1,1}) imag(Poles{1,1})];                            % Determine Location of D-Parameter's ZERO
        Zeros_vec = [real(Zeros{1,1}) imag(Zeros{1,1})];
        S = s*(D*N + P) + P*N;
        R = s + N;
        Acl =  A*R + B*S;
        if order == 3   
                Ad  = (s^2 + 2*wn*zeta*s + wn*wn)*(s^2 + 2*wn*zeta*s + wn*wn);
                Am0 = wn^3;
                A0 = (s + w0);
        elseif order == 2
                Ad  = (s^2 + 2*wn*zeta*s + wn*wn)*(s + w0);
                Am0 = wn^2;
                A0 = (s + w0);
        elseif order == 1
                Ad  = (s + abs(pdVec(1)))*(s + w0);
                Am0 = abs(pdVec(1));
                A0 = (s + w0);
        end
                                                                                    %         display(vpa(Acl,2));display(vpa(coeffs(Acl,s),2));display(vpa(Ad,2));display(vpa(coeffs(Ad,s),2));
        [D_C,N_C,P_C] = solve(coeffs(Acl,s) == coeffs(Ad,s));
        if isempty(P_C)
            disp('ERROR: No solution with pole placement!');
            H_FF = 1;
            H_FB = 1;
            return;
        end
        H_FB = tf([double(D_C*N_C+P_C) double(N_C*P_C)],[1  double(N_C)]);              % H_FB TF
        T = Am0*A0/B0;
        T_coeff = fliplr(double(coeffs(T,s)));
        H_FF = tf(T_coeff,[1  double(N_C)]);                                            % H_FF TF
        [y,t] = step(H_FF*feedback(G,H_FB));                                            % DETERMINE STEADY-STATE ERROR
        error = abs(1 - y(end));
%%
        if error > ess
%%              -------------> PID-CONTROLLER   
% P & D & I-PARAMETER REQUIRED: 
display(strcat('                          I - Parameter [x];', 'ESS = ', num2str(error))); 
            S = s*s*D*N + s*s*P + s*(I + N*P) + N*I;
            R = s*s + s*N;
            Acl =  A*R + B*S;
            if order == 3
                    Ad  = (s^2 + 2*wn*zeta*s + wn*wn)*(s + w0)*(s + w0);
                    Am0 = wn^3;
                    A0 = (s^2 + 2*w0*zeta*s + w0*w0);
            elseif order == 2
                    Ad  = (s^2 + 2*wn*zeta*s + wn*wn)*(s^2 + 2*w0*zeta*s + w0*w0);
                    Am0 = wn^2;
                    A0 = (s^2 + 2*w0*zeta*s + w0*w0);
            elseif order == 1
                Ad  = (s + abs(pdVec(1)))*(s + w0)*(s + w0);
                Am0 = abs(pdVec(1));
                A0 = (s + w0)^2;
            end
            [D_C,I_C,N_C,P_C] = solve(coeffs(Acl,s) == coeffs(Ad,s));
            if isempty(P_C)
                disp('Not possible to calculate using pole placement');
                H_FF = 1;
                H_FB = 1;
                return;
            end
            H_FB = tf([double(D_C*N_C+P_C) double(I_C+N_C*P_C) double(N_C*I_C)],[1  double(N_C) 0]);   % H_FB TF
            T = Am0*A0/B0;
            T_coeff = fliplr(double(coeffs(T,s)));
            H_FF = tf(T_coeff,[1  double(N_C) 0]);                                             % H_FF TF
%%
        else
%%              -------------> PD-CONTROLLER              
display(strcat('                          I - Parameter [ ];', 'ESS = ', num2str(error)));  
%%
        end                                                                 % disp(['                          ESS = ' num2str(error)]);
    end  
%% - END -
    
display('Parametrization completed               [x];'); 
display(' ');    
display('---- END PARAMETRIZATION -----'); 
display('------------------------------'); 
%%











%% END OF FILE
% ###################################################################
% #####################      END OF FILE       ######################