%implements s2_b0_7osoe_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T temp;
ZCEventType zcEvent;
real_T u1;
real_T u2;
%closefile localVarDecl
%assign tlcOutputsFcnOfS2B5 = OpaqueTLCBlockFcn("Outputs", 2, 5, 0, 2)
%assign tlcOutputsFcnOfS2B6 = OpaqueTLCBlockFcn("Outputs", 2, 6, 0, 2)
%assign tlcOutputsFcnOfS2B8 = OpaqueTLCBlockFcn("Outputs", 2, 8, 0, 2)
%assign tlcOutputsFcnOfS2B9 = OpaqueTLCBlockFcn("Outputs", 2, 9, 0, 2)
%assign tlcOutputsFcnOfS2B10 = OpaqueTLCBlockFcn("Outputs", 2, 10, 0, 2)
%assign tlcOutputsFcnOfS2B11 = OpaqueTLCBlockFcn("Outputs", 2, 11, 0, 2)
%assign tlcOutputsFcnOfS2B13 = OpaqueTLCBlockFcn("Outputs", 2, 13, 0, 2)
%assign tlcOutputsFcnOfS1B0 = OpaqueTLCBlockFcn("Outputs", 1, 0, 0, 2)
%assign tlcOutputsFcnOfS2B20 = OpaqueTLCBlockFcn("Outputs", 2, 20, 0, 2)
%assign tlcOutputsFcnOfS2B21 = OpaqueTLCBlockFcn("Outputs", 2, 21, 0, 2)
%<SLibCG_TrackEO(1)>\
%<SLibCG_TrackEO(0)>\
%<SLibCGIRDumpSystemUserCode(2, "Output", "Header")>\
%<SLibCGIRDumpSystemUserCode(2, "Output", "Body")>\
/* Integrator: '<S1>/Integrator3' */
mIO_B.Integrator3 = mIO_X.Integrator3_CSTATE;
/* Gain: '<S1>/Gain10' */
mIO_B.Gain10 = mIO_P.Gain10_Gain * mIO_B.Integrator3;
/* Integrator: '<S2>/Integrator1' */
mIO_B.Integrator1 = mIO_X.Integrator1_CSTATE;
/* Gain: '<S2>/Gain7' */
mIO_B.Gain7 = mIO_P.Gain7_Gain * mIO_B.Integrator1;
/* MultiPortSwitch: '<Root>/Multiport Switch3' incorporates:
 *  Constant: '<Root>/Model selector'
 */
if ((int32_T)mIO_P.Modelselector_Value == 1) {
    mIO_B.MultiportSwitch3 = mIO_B.Gain10;
} else {
    mIO_B.MultiportSwitch3 = mIO_B.Gain7;
}
/* End of MultiPortSwitch: '<Root>/Multiport Switch3' */

/* Outport: '<Root>/dph_sim' */
mIO_Y.dph_sim = mIO_B.MultiportSwitch3;
/* Integrator: '<S1>/Integrator4' */
mIO_B.Integrator4 = mIO_X.Integrator4_CSTATE;
/* Gain: '<S1>/Gain9' */
mIO_B.Gain9 = mIO_P.Gain9_Gain * mIO_B.Integrator4;
/* Integrator: '<S2>/Integrator2' */
mIO_B.Integrator2 = mIO_X.Integrator2_CSTATE;
/* Gain: '<S2>/Gain6' */
mIO_B.Gain6 = mIO_P.Gain6_Gain * mIO_B.Integrator2;
/* MultiPortSwitch: '<Root>/Multiport Switch2' incorporates:
 *  Constant: '<Root>/Model selector'
 */
if ((int32_T)mIO_P.Modelselector_Value == 1) {
    mIO_B.MultiportSwitch2 = mIO_B.Gain9;
} else {
    mIO_B.MultiportSwitch2 = mIO_B.Gain6;
}
/* End of MultiPortSwitch: '<Root>/Multiport Switch2' */

/* Outport: '<Root>/phi_sim' */
mIO_Y.phi_sim = mIO_B.MultiportSwitch2;
/* SignalGenerator: '<Root>/Ctrl. Sine' */
mIO_B.CtrlSine = sin(mIO_P.CtrlSine_Frequency * %<(SLibCG_SE(LibGetT()))>) * mIO_P.CtrlSine_Amplitude;
/* SignalGenerator: '<Root>/Ctrl. Square' */
temp = mIO_P.CtrlSquare_Frequency * %<(SLibCG_SE(LibGetT()))>;
if (temp - floor(temp) >= 0.5) {
    mIO_B.CtrlSquare = mIO_P.CtrlSquare_Amplitude;
} else {
    mIO_B.CtrlSquare = -mIO_P.CtrlSquare_Amplitude;
}
/* End of SignalGenerator: '<Root>/Ctrl. Square' */

/* Step: '<Root>/Ctrl. Step' */
temp = %<(SLibCG_SE(LibGetTaskTime(0)))>;
if (temp < mIO_P.CtrlStep_Time) {
    mIO_B.CtrlStep = mIO_P.CtrlStep_Y0;
} else {
    mIO_B.CtrlStep = mIO_P.CtrlStep_YFinal;
}
/* End of Step: '<Root>/Ctrl. Step' */

/* Step: '<Root>/Vel.Ref. Step' */
temp = %<(SLibCG_SE(LibGetTaskTime(0)))>;
if (temp < mIO_P.VelRefStep_Time) {
    mIO_B.VelRefStep = mIO_P.VelRefStep_Y0;
} else {
    mIO_B.VelRefStep = mIO_P.VelRefStep_YFinal;
}
/* End of Step: '<Root>/Vel.Ref. Step' */

/* SignalGenerator: '<Root>/Vel.Ref. Sine' */
mIO_B.VelRefSine = sin(mIO_P.VelRefSine_Frequency * %<(SLibCG_SE(LibGetT()))>) * mIO_P.VelRefSine_Amplitude;
/* SignalGenerator: '<Root>/Vel.Ref. Square' */
temp = mIO_P.VelRefSquare_Frequency * %<(SLibCG_SE(LibGetT()))>;
if (temp - floor(temp) >= 0.5) {
    mIO_B.VelRefSquare = mIO_P.VelRefSquare_Amplitude;
} else {
    mIO_B.VelRefSquare = -mIO_P.VelRefSquare_Amplitude;
}
/* End of SignalGenerator: '<Root>/Vel.Ref. Square' */

/* MultiPortSwitch: '<Root>/Multiport Switch1' incorporates:
 *  Constant: '<Root>/Vel.Ref. Signal Selector'
 */
switch ((int32_T)mIO_P.VelRefSignalSelector_Value) {
  case 1:
    mIO_B.MultiportSwitch1 = mIO_B.VelRefStep;
    break;
  case 2:
    mIO_B.MultiportSwitch1 = mIO_B.VelRefSine;
    break;
  default:
    mIO_B.MultiportSwitch1 = mIO_B.VelRefSquare;
    break;
}
/* End of MultiPortSwitch: '<Root>/Multiport Switch1' */
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
    /* ZeroOrderHold: '<Root>/ZOH3' */
    mIO_B.ZOH3 = mIO_B.MultiportSwitch1;
%<tlcOutputsFcnOfS2B5>\
    /* Gain: '<S8>/w1_scaling' */
    mIO_B.w1_scaling = mIO_P.w1_scaling_Gain * mIO_B.SFunction2;
    /* Sum: '<Root>/Sum2' */
    mIO_B.Sum2 = mIO_B.ZOH3 - mIO_B.w1_scaling;
    /* Gain: '<S5>/Proportional Gain1' */
    mIO_B.ProportionalGain1 = mIO_P.ProportionalGain1_Gain * mIO_B.Sum2;
    /* Gain: '<S5>/Derivative Gain2' */
    mIO_B.DerivativeGain2 = mIO_P.DerivativeGain2_Gain * mIO_B.Sum2;
    /* DiscreteIntegrator: '<S5>/Discrete-Time Integrator1' */
    mIO_B.DiscreteTimeIntegrator1 = mIO_DW.DiscreteTimeIntegrator1_DSTATE;
    /* Sum: '<S5>/Sum1' */
    mIO_B.Sum1 = mIO_B.DerivativeGain2 - mIO_B.DiscreteTimeIntegrator1;
    /* Gain: '<S5>/Filter Gain1' */
    mIO_B.FilterGain1 = mIO_P.FilterGain1_Gain * mIO_B.Sum1;
    /* Sum: '<S5>/Add2' */
    mIO_B.Add2 = mIO_B.ProportionalGain1 + mIO_B.FilterGain1;
    /* DiscreteIntegrator: '<S5>/Discrete-Time Integrator2' */
    mIO_B.DiscreteTimeIntegrator2 = mIO_DW.DiscreteTimeIntegrator2_DSTATE;
    /* Sum: '<S5>/Sum3' */
    mIO_B.Sum3 = mIO_B.Add2 + mIO_B.DiscreteTimeIntegrator2;
    /* Saturate: '<S5>/Saturation' */
    temp = mIO_B.Sum3;
    u1 = mIO_P.Saturation_LowerSat;
    u2 = mIO_P.Saturation_UpperSat;
    if (temp > u2) {
        mIO_B.Saturation = u2;
    } else if (temp < u1) {
        mIO_B.Saturation = u1;
    } else {
        mIO_B.Saturation = temp;
    }
    /* End of Saturate: '<S5>/Saturation' */
}
/* Step: '<Root>/Pos' */
temp = %<(SLibCG_SE(LibGetTaskTime(0)))>;
if (temp < mIO_P.Pos_Time) {
    mIO_B.Pos = mIO_P.Pos_Y0;
} else {
    mIO_B.Pos = mIO_P.Pos_YFinal;
}
/* End of Step: '<Root>/Pos' */
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
    /* ZeroOrderHold: '<Root>/ZOH1' */
    mIO_B.ZOH1 = mIO_B.Pos;
%<tlcOutputsFcnOfS2B6>\
    /* Gain: '<S8>/fi1_scaling' */
    mIO_B.fi1_scaling = mIO_P.fi1_scaling_Gain * mIO_B.SFunction1;
    /* Sum: '<Root>/Sum1' */
    mIO_B.Sum1_o = mIO_B.ZOH1 - mIO_B.fi1_scaling;
    /* Gain: '<S3>/Proportional Gain1' */
    mIO_B.ProportionalGain1_c = mIO_P.ProportionalGain1_Gain_c * mIO_B.Sum1_o;
    /* Gain: '<S3>/Derivative Gain2' */
    mIO_B.DerivativeGain2_p = mIO_P.DerivativeGain2_Gain_l * mIO_B.Sum1_o;
    /* DiscreteIntegrator: '<S3>/Discrete-Time Integrator1' */
    mIO_B.DiscreteTimeIntegrator1_p = mIO_DW.DiscreteTimeIntegrator1_DSTAT_l;
    /* Sum: '<S3>/Sum1' */
    mIO_B.Sum1_e = mIO_B.DerivativeGain2_p - mIO_B.DiscreteTimeIntegrator1_p;
    /* Gain: '<S3>/Filter Gain1' */
    mIO_B.FilterGain1_i = mIO_P.FilterGain1_Gain_o * mIO_B.Sum1_e;
    /* Sum: '<S3>/Add2' */
    mIO_B.Add2_a = mIO_B.ProportionalGain1_c + mIO_B.FilterGain1_i;
    /* DiscreteIntegrator: '<S3>/Discrete-Time Integrator2' */
    mIO_B.DiscreteTimeIntegrator2_h = mIO_DW.DiscreteTimeIntegrator2_DSTAT_k;
    /* Sum: '<S3>/Sum3' */
    mIO_B.Sum3_a = mIO_B.Add2_a + mIO_B.DiscreteTimeIntegrator2_h;
    /* Saturate: '<S3>/Saturation' */
    temp = mIO_B.Sum3_a;
    u1 = mIO_P.Saturation_LowerSat_c;
    u2 = mIO_P.Saturation_UpperSat_b;
    if (temp > u2) {
        mIO_B.Saturation_k = u2;
    } else if (temp < u1) {
        mIO_B.Saturation_k = u1;
    } else {
        mIO_B.Saturation_k = temp;
    }
    /* End of Saturate: '<S3>/Saturation' */

    /* ZeroOrderHold: '<Root>/ZOH2' */
    mIO_B.ZOH2 = mIO_B.Pos;
    /* Sum: '<Root>/Sum3' */
    mIO_B.Sum3_o = mIO_B.ZOH2 - mIO_B.fi1_scaling;
    /* Gain: '<S4>/Proportional Gain' */
    mIO_B.ProportionalGain = mIO_P.Ppos * mIO_B.Sum3_o;
    /* DiscreteIntegrator: '<S4>/Discrete-Time Integrator1' */
    mIO_B.DiscreteTimeIntegrator1_pk = mIO_DW.DiscreteTimeIntegrator1_DSTAT_i;
    /* Gain: '<S4>/Derivative Gain' */
    mIO_B.DerivativeGain = mIO_P.Dpos * mIO_B.Sum3_o;
    /* DiscreteIntegrator: '<S4>/Discrete-Time Integrator2' */
    mIO_B.DiscreteTimeIntegrator2_f = mIO_DW.DiscreteTimeIntegrator2_DSTAT_p;
    /* Sum: '<S4>/Sum' */
    mIO_B.Sum = mIO_B.DerivativeGain - mIO_B.DiscreteTimeIntegrator2_f;
    /* Gain: '<S4>/Filter Gain' */
    mIO_B.FilterGain = mIO_P.Npos * mIO_B.Sum;
    /* Sum: '<S4>/Sum1' */
    mIO_B.Sum1_ec = (mIO_B.ProportionalGain + mIO_B.DiscreteTimeIntegrator1_pk) + mIO_B.FilterGain;
    /* Saturate: '<S4>/Saturation' */
    temp = mIO_B.Sum1_ec;
    u1 = mIO_P.Saturation_LowerSat_m;
    u2 = mIO_P.Saturation_UpperSat_g;
    if (temp > u2) {
        mIO_B.Saturation_a = u2;
    } else if (temp < u1) {
        mIO_B.Saturation_a = u1;
    } else {
        mIO_B.Saturation_a = temp;
    }
    /* End of Saturate: '<S4>/Saturation' */
}
/* MultiPortSwitch: '<Root>/Multiport Switch' incorporates:
 *  Constant: '<Root>/Ctrl. Signal Selector'
 */
switch ((int32_T)mIO_P.CtrlSignalSelector_Value) {
  case 1:
    mIO_B.MultiportSwitch = mIO_B.CtrlSine;
    break;
  case 2:
    mIO_B.MultiportSwitch = mIO_B.CtrlSquare;
    break;
  case 3:
    mIO_B.MultiportSwitch = mIO_B.CtrlStep;
    break;
  case 4:
    mIO_B.MultiportSwitch = mIO_B.Saturation;
    break;
  case 5:
    mIO_B.MultiportSwitch = mIO_B.Saturation_k;
    break;
  default:
    mIO_B.MultiportSwitch = mIO_B.Saturation_a;
    break;
}
/* End of MultiPortSwitch: '<Root>/Multiport Switch' */

/* Gain: '<Root>/Gain' */
mIO_B.Gain = mIO_P.Gain_Gain * mIO_B.MultiportSwitch;
/* Saturate: '<S6>/Saturation' */
temp = mIO_B.Gain;
u1 = mIO_P.Saturation_LowerSat_k;
u2 = mIO_P.Saturation_UpperSat_bg;
if (temp > u2) {
    mIO_B.Saturation_n = u2;
} else if (temp < u1) {
    mIO_B.Saturation_n = u1;
} else {
    mIO_B.Saturation_n = temp;
}
/* End of Saturate: '<S6>/Saturation' */

/* Gain: '<S6>/pwm_skalning' */
mIO_B.pwm_skalning = mIO_P.pwm_skalning_Gain * mIO_B.Saturation_n;
/* Sum: '<S6>/Sum' incorporates:
 *  Constant: '<S6>/pwm_offstet'
 */
mIO_B.Sum_k = mIO_B.pwm_skalning + mIO_P.pwm_offstet_Value;
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
%<tlcOutputsFcnOfS2B8>\
%<tlcOutputsFcnOfS2B9>\
%<tlcOutputsFcnOfS2B10>\
%<tlcOutputsFcnOfS2B11>\
    /* DataTypeConversion: '<S6>/Data Type Conversion' incorporates:
 *  Constant: '<S6>/Enable[1_Off, 0_On]'
 */
    mIO_B.DataTypeConversion = (mIO_P.Enable1_Off0_On_Value != 0.0);
%<tlcOutputsFcnOfS2B13>\
}
/* Gain: '<S1>/Gain3' */
mIO_B.Gain3 = mIO_P.Gain3_Gain * mIO_B.Integrator3;
/* Gain: '<S1>/Gain2' */
mIO_B.Gain2 = mIO_P.Gain2_Gain * mIO_B.MultiportSwitch;
/* Sum: '<S1>/Add2' */
mIO_B.Add2_e = mIO_B.Gain2 - mIO_B.Gain3;
/* MATLAB Function: '<S1>/MATLAB Function' incorporates:
 *  Constant: '<S1>/Constant'
 *  Constant: '<S1>/Constant1'
 */
/* MATLAB Function 'Model friction /MATLAB Function': '<S9>:1' */
if (fabs(mIO_B.Gain10) < mIO_P.dv) {
    /* '<S9>:1:3' */
    if (fabs(mIO_B.Gain2) > mIO_P.Tc) {
        /* '<S9>:1:4' */
        /* '<S9>:1:5' */
        temp = mIO_B.Gain2;
        if (temp < 0.0) {
            temp = -1.0;
        } else if (temp > 0.0) {
            temp = 1.0;
        } else {
            if (temp == 0.0) {
                temp = 0.0;
            }
        }
        mIO_B.Tf = mIO_P.Tc * temp;
    } else {
        /* '<S9>:1:7' */
        mIO_B.Tf = mIO_B.Gain2;
    }
} else {
    /* '<S9>:1:10' */
    temp = mIO_B.Gain10;
    if (temp < 0.0) {
        temp = -1.0;
    } else if (temp > 0.0) {
        temp = 1.0;
    } else {
        if (temp == 0.0) {
            temp = 0.0;
        }
    }
    mIO_B.Tf = mIO_P.Tc * temp;
}
/* End of MATLAB Function: '<S1>/MATLAB Function' */

/* Sum: '<S1>/Add3' */
mIO_B.Add3 = mIO_B.Add2_e - mIO_B.Tf;
/* Gain: '<S1>/Gain5' */
mIO_B.Gain5 = mIO_P.Gain5_Gain * mIO_B.Add3;
/* Gain: '<S2>/Gain2' */
mIO_B.Gain2_i = mIO_P.Gain2_Gain_g * mIO_B.MultiportSwitch;
/* Gain: '<S2>/eps_dm' */
mIO_B.eps_dm = mIO_P.eps_dm * mIO_B.Integrator1;
/* Gain: '<S2>/Friction' */
mIO_B.Friction = mIO_P.dm * mIO_B.eps_dm;
/* Gain: '<S2>/Gain4' */
mIO_B.Gain4 = mIO_P.Gain4_Gain * mIO_B.Integrator1;
/* Sum: '<S2>/Sum2' */
mIO_B.Sum2_g = mIO_B.Friction + mIO_B.Gain4;
/* Sum: '<S2>/Sum1' */
mIO_B.Sum1_a = mIO_B.Gain2_i - mIO_B.Sum2_g;
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
    /* Gain: '<S2>/eps_Jeq' incorporates:
 *  Constant: '<S2>/Jeq'
 */
    mIO_B.eps_Jeq = mIO_P.eps_Jeq * mIO_P.Jeq;
}
/* Product: '<S2>/Divide' */
mIO_B.Divide = mIO_B.Sum1_a / mIO_B.eps_Jeq;
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
    /* Sum: '<S3>/Sum2' */
    mIO_B.Sum2_b = mIO_B.Sum3_a - mIO_B.Saturation_k;
    /* Gain: '<S3>/Anti-Windup1' */
    mIO_B.AntiWindup1 = mIO_P.AntiWindup1_Gain * mIO_B.Sum2_b;
    /* Gain: '<S3>/Anti-Windup2' */
    mIO_B.AntiWindup2 = mIO_P.AntiWindup2_Gain * mIO_B.AntiWindup1;
    /* Gain: '<S3>/Integral Gain2' */
    mIO_B.IntegralGain2 = mIO_P.IntegralGain2_Gain * mIO_B.Sum1_o;
    /* Sum: '<S3>/Sum5' */
    mIO_B.Sum5 = mIO_B.IntegralGain2 - mIO_B.AntiWindup2;
    /* Sum: '<S4>/Sum3' */
    mIO_B.Sum3_b = mIO_B.Sum1_ec - mIO_B.Saturation_a;
    /* Gain: '<S4>/Anti-Windup' */
    mIO_B.AntiWindup = mIO_P.AntiWindup_Gain * mIO_B.Sum3_b;
    /* Gain: '<S4>/Anti-Windup1' */
    mIO_B.AntiWindup1_n = mIO_P.AntiWindup1_Gain_j * mIO_B.AntiWindup;
    /* Gain: '<S4>/Integral Gain' */
    mIO_B.IntegralGain = mIO_P.Ipos * mIO_B.Sum3_o;
    /* Sum: '<S4>/Sum4' */
    mIO_B.Sum4 = mIO_B.IntegralGain - mIO_B.AntiWindup1_n;
    /* Sum: '<S5>/Sum2' */
    mIO_B.Sum2_o = mIO_B.Sum3 - mIO_B.Saturation;
    /* Gain: '<S5>/Anti-Windup' */
    mIO_B.AntiWindup_e = mIO_P.AntiWindup_Gain_o * mIO_B.Sum2_o;
    /* Gain: '<S5>/Anti-Windup1' */
    mIO_B.AntiWindup1_k = mIO_P.AntiWindup1_Gain_f * mIO_B.AntiWindup_e;
    /* Gain: '<S5>/Integral Gain2' */
    mIO_B.IntegralGain2_g = mIO_P.IntegralGain2_Gain_h * mIO_B.Sum2;
    /* Sum: '<S5>/Sum4' */
    mIO_B.Sum4_f = mIO_B.IntegralGain2_g - mIO_B.AntiWindup1_k;
    /* Outputs for Triggered SubSystem: '<S8>/DS1104ENC_SET_POS_C1' incorporates:
 *  TriggerPort: '<S17>/Trigger'
 */
    if (%<(LibIsMajorTimeStep())>) {
        /* Constant: '<S8>/Reset enc' */
        zcEvent = %<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "mIO_PrevZCX.DS1104ENC_SET_POS_C1_Trig_ZCE", "mIO_P.Resetenc_Value", 0)))>;
        if (zcEvent != NO_ZCEVENT) {
%<SLibCGIRDumpSystemUserCode(1, "Output", "Header")>\
%<SLibCGIRDumpSystemUserCode(1, "Output", "Body")>\
%<tlcOutputsFcnOfS1B0>\
%<SLibCGIRDumpSystemUserCode(1, "Output", "Trailer")>\
%<SLibCGIRDumpSystemUserCode(1, "Update", "Header")>\
%<SLibCGIRDumpSystemUserCode(1, "Update", "Body")>\
%<SLibCGIRDumpSystemUserCode(1, "Update", "Trailer")>\
        }
    }
    /* End of Outputs for SubSystem: '<S8>/DS1104ENC_SET_POS_C1' */
%<tlcOutputsFcnOfS2B20>\
%<tlcOutputsFcnOfS2B21>\
}
%<SLibCGIRDumpSystemUserCode(2, "Output", "Trailer")>\
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
